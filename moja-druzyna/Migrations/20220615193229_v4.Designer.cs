// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using moja_druzyna.Data;

namespace moja_druzyna.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220615193229_v4")]
    partial class v4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("moja_druzyna.Models.Achievement", b =>
                {
                    b.Property<int>("IdAchievement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdAchievement");

                    b.ToTable("achievement");
                });

            modelBuilder.Entity("moja_druzyna.Models.Address", b =>
                {
                    b.Property<string>("ParentPesel")
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("ScoutPeselScout")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddressKor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressZam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityKor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityZam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryKor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryZam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberHouseKor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberHouseZam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetKor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetZam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipKor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipZam")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ParentPesel", "ScoutPeselScout")
                        .HasName("PK_adresss_quicksolve");

                    b.HasIndex("ParentPesel")
                        .IsUnique();

                    b.HasIndex("ScoutPeselScout")
                        .IsUnique();

                    b.ToTable("address");
                });

            modelBuilder.Entity("moja_druzyna.Models.Agreement", b =>
                {
                    b.Property<int>("IdAgreement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdAgreement");

                    b.ToTable("agreement");
                });

            modelBuilder.Entity("moja_druzyna.Models.AttendanceList", b =>
                {
                    b.Property<int>("IdList")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfList")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EventIdEvent")
                        .HasColumnType("int");

                    b.Property<int?>("HostIdHost")
                        .HasColumnType("int");

                    b.Property<string>("ScoutIdScout")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScoutPeselScout")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("TeamIdTeam")
                        .HasColumnType("int");

                    b.HasKey("IdList");

                    b.HasIndex("EventIdEvent");

                    b.HasIndex("HostIdHost");

                    b.HasIndex("ScoutPeselScout");

                    b.HasIndex("TeamIdTeam");

                    b.ToTable("attendance_list");
                });

            modelBuilder.Entity("moja_druzyna.Models.Collection", b =>
                {
                    b.Property<int>("IdCollection")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EventIdEvent")
                        .HasColumnType("int");

                    b.Property<int?>("IdEvent")
                        .HasColumnType("int");

                    b.Property<int?>("Quarter")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCollection");

                    b.HasIndex("EventIdEvent");

                    b.ToTable("collection");
                });

            modelBuilder.Entity("moja_druzyna.Models.DutyHistory", b =>
                {
                    b.Property<string>("ScoutPeselScout")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Team")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Host")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Banner")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<string>("Detachment")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ScoutPeselScout", "Team", "Host", "DateStart", "Banner");

                    b.HasIndex("ScoutPeselScout")
                        .IsUnique();

                    b.ToTable("duty_history");
                });

            modelBuilder.Entity("moja_druzyna.Models.Event", b =>
                {
                    b.Property<int>("IdEvent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateStartDateNotNullDateEnd")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("HasCost")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdEvent");

                    b.ToTable("event");
                });

            modelBuilder.Entity("moja_druzyna.Models.EventTeam", b =>
                {
                    b.Property<int>("EventIdEvent")
                        .HasColumnType("int");

                    b.Property<int>("TeamIdTeam")
                        .HasColumnType("int");

                    b.HasKey("EventIdEvent", "TeamIdTeam")
                        .HasName("PK__event_te__FD53622128F556BD");

                    b.HasIndex("TeamIdTeam");

                    b.ToTable("event_team");
                });

            modelBuilder.Entity("moja_druzyna.Models.Host", b =>
                {
                    b.Property<int>("IdHost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TeamIdTeam")
                        .HasColumnType("int");

                    b.HasKey("IdHost");

                    b.HasIndex("TeamIdTeam");

                    b.ToTable("host");
                });

            modelBuilder.Entity("moja_druzyna.Models.Parent", b =>
                {
                    b.Property<string>("Pesel")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IdentityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SecondName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Surname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Pesel");

                    b.HasIndex("IdentityId");

                    b.ToTable("parent");
                });

            modelBuilder.Entity("moja_druzyna.Models.Points", b =>
                {
                    b.Property<DateTime>("DateAcquirement")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ScoutPeselScout")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Ammount")
                        .HasColumnType("int");

                    b.HasKey("DateAcquirement", "OrderId", "ScoutPeselScout")
                        .HasName("PK__points__FD53622128F556BD");

                    b.HasIndex("ScoutPeselScout");

                    b.ToTable("Points");
                });

            modelBuilder.Entity("moja_druzyna.Models.Rank", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.ToTable("rank");
                });

            modelBuilder.Entity("moja_druzyna.Models.Scout", b =>
                {
                    b.Property<string>("PeselScout")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CrossNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfEntry")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfLeaving")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MembershipNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nationality")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Ns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentParentPesel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentPesel")
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("SecondName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PeselScout");

                    b.HasIndex("IdentityId");

                    b.HasIndex("ParentPesel");

                    b.ToTable("scout");
                });

            modelBuilder.Entity("moja_druzyna.Models.ScoutAchievement", b =>
                {
                    b.Property<string>("ScoutPeselScout")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AchievementIdAchievement")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("ScoutPeselScout", "AchievementIdAchievement")
                        .HasName("PK__scout_achievement__14C192AA7E8B153B");

                    b.HasIndex("AchievementIdAchievement");

                    b.HasIndex("ScoutPeselScout")
                        .IsUnique();

                    b.ToTable("scout_achievement");
                });

            modelBuilder.Entity("moja_druzyna.Models.ScoutAgreement", b =>
                {
                    b.Property<string>("ScoutPeselScout")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AgreementIdAgreement")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DataCancel")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateSign")
                        .HasColumnType("datetime2");

                    b.HasKey("ScoutPeselScout", "AgreementIdAgreement")
                        .HasName("PK__scout_ag__14C192AA7E8B153B");

                    b.HasIndex("AgreementIdAgreement");

                    b.ToTable("scout_agreement");
                });

            modelBuilder.Entity("moja_druzyna.Models.ScoutCollection", b =>
                {
                    b.Property<string>("ScoutPeselScout")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CollectionIdCollection")
                        .HasColumnType("int");

                    b.Property<string>("Advance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ammount")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAcquirement")
                        .HasColumnType("datetime2");

                    b.HasKey("ScoutPeselScout", "CollectionIdCollection")
                        .HasName("PK__scout_co__EDEC6AB95EAAD616");

                    b.HasIndex("CollectionIdCollection");

                    b.ToTable("scout_collection");
                });

            modelBuilder.Entity("moja_druzyna.Models.ScoutCourse", b =>
                {
                    b.Property<string>("ScoutPeselScout")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TrainingCourseIdCourse")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAcquirement")
                        .HasColumnType("datetime2");

                    b.HasKey("ScoutPeselScout", "TrainingCourseIdCourse")
                        .HasName("PK__scout_co__F0AEC3E099E17797");

                    b.HasIndex("TrainingCourseIdCourse");

                    b.ToTable("scout_course");
                });

            modelBuilder.Entity("moja_druzyna.Models.ScoutEvent", b =>
                {
                    b.Property<string>("ScoutPeselScout")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("EventIdEvent")
                        .HasColumnType("int");

                    b.HasKey("ScoutPeselScout", "EventIdEvent")
                        .HasName("PK__scout_ev__A6050A5886C962DC");

                    b.HasIndex("EventIdEvent");

                    b.ToTable("scout_event");
                });

            modelBuilder.Entity("moja_druzyna.Models.ScoutHost", b =>
                {
                    b.Property<string>("ScoutPeselScout")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("HostIdHost")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ScoutPeselScout", "HostIdHost")
                        .HasName("PK__scout_host__84F25C26A6B4D35B");

                    b.HasIndex("HostIdHost");

                    b.ToTable("scout_host");
                });

            modelBuilder.Entity("moja_druzyna.Models.ScoutRank", b =>
                {
                    b.Property<string>("ScoutPeselScout")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RankName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CurrentRank")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAcquirement")
                        .HasColumnType("datetime2");

                    b.HasKey("ScoutPeselScout", "RankName")
                        .HasName("PK__scout_ra__F838FC8F4D9C216B");

                    b.HasIndex("RankName");

                    b.ToTable("scout_rank");
                });

            modelBuilder.Entity("moja_druzyna.Models.ScoutTeam", b =>
                {
                    b.Property<string>("ScoutPeselScout")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TeamIdTeam")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ScoutPeselScout", "TeamIdTeam")
                        .HasName("PK__scout_team__84F25C26A6B4D35B");

                    b.HasIndex("TeamIdTeam");

                    b.ToTable("scout_team");
                });

            modelBuilder.Entity("moja_druzyna.Models.Team", b =>
                {
                    b.Property<int>("IdTeam")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdTeam");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("moja_druzyna.Models.TrainingCourse", b =>
                {
                    b.Property<int>("IdCourse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdCourse");

                    b.ToTable("TrainingCourses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("moja_druzyna.Models.Address", b =>
                {
                    b.HasOne("moja_druzyna.Models.Parent", "Parent")
                        .WithOne("Adresses")
                        .HasForeignKey("moja_druzyna.Models.Address", "ParentPesel")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("moja_druzyna.Models.Scout", "Scout")
                        .WithOne("Adress")
                        .HasForeignKey("moja_druzyna.Models.Address", "ScoutPeselScout")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Scout");
                });

            modelBuilder.Entity("moja_druzyna.Models.AttendanceList", b =>
                {
                    b.HasOne("moja_druzyna.Models.Event", "Event")
                        .WithMany("AttendanceLists")
                        .HasForeignKey("EventIdEvent");

                    b.HasOne("moja_druzyna.Models.Host", "Host")
                        .WithMany("AttendanceLists")
                        .HasForeignKey("HostIdHost");

                    b.HasOne("moja_druzyna.Models.Scout", "Scout")
                        .WithMany("AttendanceList")
                        .HasForeignKey("ScoutPeselScout");

                    b.HasOne("moja_druzyna.Models.Team", "Team")
                        .WithMany("AttendanceLists")
                        .HasForeignKey("TeamIdTeam");

                    b.Navigation("Event");

                    b.Navigation("Host");

                    b.Navigation("Scout");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("moja_druzyna.Models.Collection", b =>
                {
                    b.HasOne("moja_druzyna.Models.Event", "Event")
                        .WithMany("Collections")
                        .HasForeignKey("EventIdEvent");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("moja_druzyna.Models.DutyHistory", b =>
                {
                    b.HasOne("moja_druzyna.Models.Scout", "Scout")
                        .WithOne("DutyHistory")
                        .HasForeignKey("moja_druzyna.Models.DutyHistory", "ScoutPeselScout")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scout");
                });

            modelBuilder.Entity("moja_druzyna.Models.EventTeam", b =>
                {
                    b.HasOne("moja_druzyna.Models.Event", "Event")
                        .WithMany("EventTeams")
                        .HasForeignKey("EventIdEvent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("moja_druzyna.Models.Team", "Team")
                        .WithMany("EventTeams")
                        .HasForeignKey("TeamIdTeam")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("moja_druzyna.Models.Host", b =>
                {
                    b.HasOne("moja_druzyna.Models.Team", "Team")
                        .WithMany("Hosts")
                        .HasForeignKey("TeamIdTeam")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("moja_druzyna.Models.Parent", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Identity")
                        .WithMany()
                        .HasForeignKey("IdentityId");

                    b.Navigation("Identity");
                });

            modelBuilder.Entity("moja_druzyna.Models.Points", b =>
                {
                    b.HasOne("moja_druzyna.Models.Scout", "Scout")
                        .WithMany("Points")
                        .HasForeignKey("ScoutPeselScout")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scout");
                });

            modelBuilder.Entity("moja_druzyna.Models.Scout", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Identity")
                        .WithMany()
                        .HasForeignKey("IdentityId");

                    b.HasOne("moja_druzyna.Models.Parent", "Parent")
                        .WithMany("Scouts")
                        .HasForeignKey("ParentPesel");

                    b.Navigation("Identity");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("moja_druzyna.Models.ScoutAchievement", b =>
                {
                    b.HasOne("moja_druzyna.Models.Achievement", "Achievement")
                        .WithMany("ScoutAchievements")
                        .HasForeignKey("AchievementIdAchievement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("moja_druzyna.Models.Scout", "Scout")
                        .WithOne("ScoutAchievement")
                        .HasForeignKey("moja_druzyna.Models.ScoutAchievement", "ScoutPeselScout")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("Scout");
                });

            modelBuilder.Entity("moja_druzyna.Models.ScoutAgreement", b =>
                {
                    b.HasOne("moja_druzyna.Models.Agreement", "Agreement")
                        .WithMany("ScoutAgreements")
                        .HasForeignKey("AgreementIdAgreement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("moja_druzyna.Models.Scout", "Scout")
                        .WithMany("ScoutAgreements")
                        .HasForeignKey("ScoutPeselScout")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agreement");

                    b.Navigation("Scout");
                });

            modelBuilder.Entity("moja_druzyna.Models.ScoutCollection", b =>
                {
                    b.HasOne("moja_druzyna.Models.Collection", "Collection")
                        .WithMany("ScoutCollections")
                        .HasForeignKey("CollectionIdCollection")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("moja_druzyna.Models.Scout", "Scout")
                        .WithMany("ScoutCollections")
                        .HasForeignKey("ScoutPeselScout")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");

                    b.Navigation("Scout");
                });

            modelBuilder.Entity("moja_druzyna.Models.ScoutCourse", b =>
                {
                    b.HasOne("moja_druzyna.Models.Scout", "Scout")
                        .WithMany("ScoutCourses")
                        .HasForeignKey("ScoutPeselScout")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("moja_druzyna.Models.TrainingCourse", "TrainingCourse")
                        .WithMany("ScoutCourses")
                        .HasForeignKey("TrainingCourseIdCourse")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scout");

                    b.Navigation("TrainingCourse");
                });

            modelBuilder.Entity("moja_druzyna.Models.ScoutEvent", b =>
                {
                    b.HasOne("moja_druzyna.Models.Event", "Event")
                        .WithMany("ScoutEvents")
                        .HasForeignKey("EventIdEvent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("moja_druzyna.Models.Scout", "Scout")
                        .WithMany("ScoutEvents")
                        .HasForeignKey("ScoutPeselScout")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Scout");
                });

            modelBuilder.Entity("moja_druzyna.Models.ScoutHost", b =>
                {
                    b.HasOne("moja_druzyna.Models.Host", "Host")
                        .WithMany("ScoutHost")
                        .HasForeignKey("HostIdHost")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("moja_druzyna.Models.Scout", "Scout")
                        .WithMany("ScoutHost")
                        .HasForeignKey("ScoutPeselScout")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Host");

                    b.Navigation("Scout");
                });

            modelBuilder.Entity("moja_druzyna.Models.ScoutRank", b =>
                {
                    b.HasOne("moja_druzyna.Models.Rank", "Rank")
                        .WithMany("ScoutRanks")
                        .HasForeignKey("RankName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("moja_druzyna.Models.Scout", "Scout")
                        .WithMany("ScoutRanks")
                        .HasForeignKey("ScoutPeselScout")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rank");

                    b.Navigation("Scout");
                });

            modelBuilder.Entity("moja_druzyna.Models.ScoutTeam", b =>
                {
                    b.HasOne("moja_druzyna.Models.Scout", "Scout")
                        .WithMany("ScoutTeam")
                        .HasForeignKey("ScoutPeselScout")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("moja_druzyna.Models.Team", "Team")
                        .WithMany("ScoutTeam")
                        .HasForeignKey("TeamIdTeam")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scout");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("moja_druzyna.Models.Achievement", b =>
                {
                    b.Navigation("ScoutAchievements");
                });

            modelBuilder.Entity("moja_druzyna.Models.Agreement", b =>
                {
                    b.Navigation("ScoutAgreements");
                });

            modelBuilder.Entity("moja_druzyna.Models.Collection", b =>
                {
                    b.Navigation("ScoutCollections");
                });

            modelBuilder.Entity("moja_druzyna.Models.Event", b =>
                {
                    b.Navigation("AttendanceLists");

                    b.Navigation("Collections");

                    b.Navigation("EventTeams");

                    b.Navigation("ScoutEvents");
                });

            modelBuilder.Entity("moja_druzyna.Models.Host", b =>
                {
                    b.Navigation("AttendanceLists");

                    b.Navigation("ScoutHost");
                });

            modelBuilder.Entity("moja_druzyna.Models.Parent", b =>
                {
                    b.Navigation("Adresses");

                    b.Navigation("Scouts");
                });

            modelBuilder.Entity("moja_druzyna.Models.Rank", b =>
                {
                    b.Navigation("ScoutRanks");
                });

            modelBuilder.Entity("moja_druzyna.Models.Scout", b =>
                {
                    b.Navigation("Adress");

                    b.Navigation("AttendanceList");

                    b.Navigation("DutyHistory");

                    b.Navigation("Points");

                    b.Navigation("ScoutAchievement");

                    b.Navigation("ScoutAgreements");

                    b.Navigation("ScoutCollections");

                    b.Navigation("ScoutCourses");

                    b.Navigation("ScoutEvents");

                    b.Navigation("ScoutHost");

                    b.Navigation("ScoutRanks");

                    b.Navigation("ScoutTeam");
                });

            modelBuilder.Entity("moja_druzyna.Models.Team", b =>
                {
                    b.Navigation("AttendanceLists");

                    b.Navigation("EventTeams");

                    b.Navigation("Hosts");

                    b.Navigation("ScoutTeam");
                });

            modelBuilder.Entity("moja_druzyna.Models.TrainingCourse", b =>
                {
                    b.Navigation("ScoutCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
